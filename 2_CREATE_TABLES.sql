--CREATE CUSTOMER: SEQUENCE AND TABLE 
CREATE SEQUENCE CUST_ID_SEQ
START WITH 10000
INCREMENT BY 1;

CREATE TABLE CUSTOMER (
    CUST_ID INT CONSTRAINT CID_PK PRIMARY KEY,
    CUST_NAME VARCHAR2(50) CONSTRAINT CUSTN_NN NOT NULL,
    CUST_STREET VARCHAR2(50),
    CUST_CITY VARCHAR2(20),
    CUST_STATE VARCHAR2(50),
    CUST_ZIP VARCHAR2(5) CONSTRAINT VALID_ZIP CHECK(REGEXP_LIKE(CUST_ZIP,'^\d{5}$')) ,
    CUST_REGION VARCHAR2(50),
    CONSTRAINT CUST_REGION_LIST CHECK(CUST_REGION IN ('N','S','E','W','NE','NW','SE','SW'))
    );


--CREATE EMPLOYEE: SEQUENCE AND TABLE
CREATE SEQUENCE EMP_ID_SEQ
START WITH 123455
INCREMENT BY 1;

CREATE TABLE EMPLOYEE (
    EMP_ID INT CONSTRAINT EID_PK PRIMARY KEY,
    EMP_NAME VARCHAR2(45) CONSTRAINT EMP_NN NOT NULL,
    EMP_DOB DATE,
    EMP_STREET VARCHAR2(50),
    EMP_CITY VARCHAR2(50),
    EMP_STATE VARCHAR2(50),
    EMP_ZIP VARCHAR2(5),
    EMP_HIREDATE DATE,
    EMP_ENDDATE DATE
);


--CREATE PART: SEQUENCE AND TABLE
CREATE SEQUENCE PART_NUM_SEQ
START WITH 49999
INCREMENT BY 1;

CREATE TABLE PART (
    PART_ID INT CONSTRAINT PID_PK PRIMARY KEY,
    PART_NAME VARCHAR2(50) CONSTRAINT PNAME_NN NOT NULL,
    COMMODITY VARCHAR2(25),
    STATUS VARCHAR2(10) CHECK(STATUS IN ('OPEN','CLOSED')),
    QTY_UNIT VARCHAR2(10),
    INVENTORY DECIMAL(10,4)
);


--CREATE SUPPLIER: SEQUENCE AND TABLE
CREATE SEQUENCE SUPP_ID_SEQ
START WITH 300
INCREMENT BY 1;

CREATE TABLE SUPPLIER(
    SUPP_ID INT CONSTRAINT SID_PK PRIMARY KEY,
    SUPP_NAME VARCHAR2(50) CONSTRAINT SNAME_NN NOT NULL,
    SUPP_STREET VARCHAR2(50),
    SUPP_CITY VARCHAR2(20),
    SUPP_STATE VARCHAR2(50),
    SUPP_ZIP VARCHAR2(5),
    SUPP_REGION VARCHAR2(50) CHECK(SUPP_REGION IN ('N','S','E','W','NE','NW','SE','SW')) 
);


--CREATE SUPPLIER_CONTACT: SEQUENCE AND TABLE
CREATE SEQUENCE SUPP_EMPID_SEQ
START WITH 2000
INCREMENT BY 1;

CREATE TABLE SUPPLIER_CONTACT(
    SUPP_EMP_ID INT CONSTRAINT SUPP_EMP_ID_PK PRIMARY KEY,
    SUPP_EMP_NAME VARCHAR2(20) CONSTRAINT SUPP_EMP_NAME_NN NOT NULL,
    SUPP_EMP_EMAIL VARCHAR2(25),
    SUPP_EMP_PHONE VARCHAR2(10),
    SUPP_EMP_DESIGNATION VARCHAR2(20),
    SUPP_EMP_START DATE,
    SUPP_EMP_END DATE,
    SUPP_ID INT,
    FOREIGN KEY (SUPP_ID)
        REFERENCES SUPPLIER(SUPP_ID)
        ON DELETE SET NULL
);


--CREATE PROGRAM: SEQUENCE AND TABLE
CREATE SEQUENCE PROG_ID_SEQ
START WITH 100
INCREMENT BY 1;

CREATE TABLE PROGRAMS (
    PROG_ID INT CONSTRAINT PROG_ID_PK PRIMARY KEY,
    PROG_NAME VARCHAR2(20) CONSTRAINT PROG_NAME_NN NOT NULL,
    PROG_START DATE,
    PROG_END DATE,
    AVG_PROD_WEEKLY DECIMAL(10,4),
    MAX_PROD_WEEKLY DECIMAL(10,4),
    PROG_STATUS VARCHAR2(10),
    CUST_ID INT,
    FOREIGN KEY (CUST_ID)
        REFERENCES CUSTOMER(CUST_ID)
        ON DELETE SET NULL,
    CONSTRAINT PROG_STATUS_LIST CHECK(PROG_STATUS IN ('OPEN','CLOSED','DELAYED','CANCELLED'))      
); 


--CREATE EMPLOYEE_PROGRAM: SEQUENCE AND TABLE
CREATE SEQUENCE EMP_PROG_ID_SEQ
START WITH 9000
INCREMENT BY 1;

CREATE TABLE EMPLOYEE_PROGRAM(
    EMP_PROG_ID INT CONSTRAINT EPS_PK PRIMARY KEY,
    EMP_ID INT,
    PROG_ID INT,
    DESIGNATION VARCHAR2(20),
    START_DATE DATE,
    END_DATE DATE,
    FOREIGN KEY (PROG_ID)
        REFERENCES PROGRAMS(PROG_ID)
        ON DELETE SET NULL,
    FOREIGN KEY (EMP_ID)
        REFERENCES EMPLOYEE(EMP_ID)
        ON DELETE SET NULL
);


--CREATE PROGRAM_PART: SEQUENCE AND TABLE
CREATE SEQUENCE PROG_PART_ID_SEQ
START WITH 60000
INCREMENT BY 1;

CREATE TABLE PROGRAM_PART(
    PROG_PART_ID INT CONSTRAINT PPID_PK PRIMARY KEY,
    PROG_ID INT,
    PART_ID INT,
    QTY_FACTOR DECIMAL(10,4),
    FOREIGN KEY (PROG_ID)
        REFERENCES PROGRAMS(PROG_ID)
        ON DELETE SET NULL,
    FOREIGN KEY (PART_ID)
        REFERENCES PART(PART_ID)
        ON DELETE SET NULL
);


--CREATE OUTGOING_INVOICE: SEQUENCE AND TABLE
CREATE SEQUENCE OUT_INV_NO_SEQ
START WITH 201900
INCREMENT BY 1;

CREATE TABLE OUTGOING_INVOICE(
    OUT_INV_NO INT CONSTRAINT OUT_INV_NO_PK PRIMARY KEY,
    OUT_INV_DATE DATE CONSTRAINT OUT_INV_DATE_NN NOT NULL,
    QUANTITY DECIMAL(10,4) CONSTRAINT OUT_INV_QTY_NN NOT NULL,
    QTY_UNIT VARCHAR2(10) CONSTRAINT OUT_INV_QUNIT_NN NOT NULL,
    COST_PER_UNIT DECIMAL(10,4) CONSTRAINT OUT_INV_RATE_NN NOT NULL,
    COST_UNIT VARCHAR2(10) CONSTRAINT OUT_INV_CUNIT_NN NOT NULL,
    PROG_PART_ID INT,
    FOREIGN KEY (PROG_PART_ID)
        REFERENCES PROGRAM_PART(PROG_PART_ID)
        ON DELETE SET NULL
);



--CREATE APPROVAL_DETAILS: SEQUENCE AND TABLE
CREATE SEQUENCE PART_APP_ID_SEQ
START WITH 4000
INCREMENT BY 1;

CREATE TABLE APPROVAL_DETAILS (
    PART_APPR_ID INT CONSTRAINT PART_APP_ID_PK PRIMARY KEY,
    PART_ID INT,
    SUPP_ID INT,
    APP_STATUS VARCHAR2(10) CONSTRAINT APP_STATUS_LIST CHECK(APP_STATUS IN ('APPROVED','DENIED','PENDING','CLOSED')), 
    SUBMIT_DATE DATE,
    APP_DATE DATE,
    SQE_REP INT,
    APP_COST DECIMAL(10,4),
    AVG_PROD_WEEKLY DECIMAL(10,4),
    MAX_PROD_WEEKLY DECIMAL(10,4),
    FOREIGN KEY (PART_ID)
        REFERENCES PART(PART_ID)
        ON DELETE SET NULL,
    FOREIGN KEY (SUPP_ID)
        REFERENCES SUPPLIER(SUPP_ID)
        ON DELETE SET NULL,
    FOREIGN KEY(SQE_REP)
        REFERENCES EMPLOYEE(EMP_ID)
        ON DELETE SET NULL
);


--CREATE PURCHASE_ORDER: SEQUENCE AND TABLE
CREATE SEQUENCE PO_NO_SEQ
START WITH 70000
INCREMENT BY 1;


CREATE TABLE PURCHASE_ORDER (
    PO_NO INT CONSTRAINT PO_PK PRIMARY KEY, --CREATE TRIGGER FOR PO NUMBER WITH S.NO,PART NO. AND DATE
    PART_APPR_ID INT CONSTRAINT PART_APPR_ID_NN NOT NULL,
    PO_DATE DATE CONSTRAINT PO_DATE_NN NOT NULL, 
    ITEM_QTY DECIMAL(10,4),
        FOREIGN KEY (PART_APPR_ID)
        REFERENCES APPROVAL_DETAILS(PART_APPR_ID)
        ON DELETE SET NULL
);
